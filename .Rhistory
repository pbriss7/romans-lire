size = 2.5,
colour = "black")+
labs(title = "Distribution chronologique des documents par décennies\nNombre brut de documents",
caption = "Données: BANQ, 2023")+
ylab(NULL)+
xlab("Décennies")+
theme(axis.text.x = element_text(angle = 55, vjust = 0.5, hjust=0.5))+
theme_classic()
ggsave("resultats/diagrammes/20230418_PB_DistribChronologiqueDecennies.png", dpi=300)
# Croisement des tables
paysPublication <- merge.data.table(rAlireIntegral[, .(numero_de_sequence, pays)], equiv_pays, by.x = "pays", by.y = "sigle")
paysPublication_N <- paysPublication[, .N, by="paysAssocie"][order(N, decreasing = TRUE)]
DistribPaysPublication <- ggplot(paysPublication_N[N>10],
aes(x = reorder(paysAssocie, N), y=N)) +
geom_bar(stat = "identity")+
coord_flip() +
geom_text(aes(label = N),
hjust = 0,
vjust = +0.7,
size = 2.5,
colour = "black")+
labs(title = "Distribution des documents selon les principaux pays de publication",
caption = "Données: BANQ, 2023")+
xlab(NULL)+
ylab(NULL)+
theme_classic()
ggsave("resultats/diagrammes/20230418_PB_DistribPaysPublication.png", dpi=300)
DistribPaysPublication <- ggplot(litteratureNationaleEtiquettes2termes_N[1:10],
aes(x = reorder(etiquettes2termes, N), y=N)) +
geom_bar(stat = "identity")+
coord_flip() +
geom_text(aes(label = N),
hjust = 0,
vjust = +0.7,
size = 2.5,
colour = "black")+
labs(title = "Distribution des documents selon la nationalité de l'auteur",
caption = "Données: BANQ, 2023")+
xlab(NULL)+
ylab(NULL)+
theme_classic()
DistribLitteratureNationale <- ggplot(litteratureNationaleEtiquettes2termes_N[1:10],
aes(x = reorder(etiquettes2termes, N), y=N)) +
geom_bar(stat = "identity")+
coord_flip() +
geom_text(aes(label = N),
hjust = 0,
vjust = +0.7,
size = 2.5,
colour = "black")+
labs(title = "Distribution des documents selon la nationalité de l'auteur",
caption = "Données: BANQ, 2023")+
xlab(NULL)+
ylab(NULL)+
theme_classic()
DistribLitteratureNationale
ggsave("resultats/diagrammes/20230418_PB_DistribLittNationale2termes.png", dpi=300)
DistribLitteratureNationale <- ggplot(litteratureNationaleEtiquettes2termes_N[1:10],
aes(x = reorder(etiquettes2termes, N), y=N)) +
geom_bar(stat = "identity")+
coord_flip() +
geom_text(aes(label = N),
hjust = 0,
vjust = +0.7,
size = 2.5,
colour = "black")+
labs(title = "Distribution des documents selon la nationalité de l'auteur",
caption = "Données: BANQ, 2023")+
xlab(NULL)+
ylab(NULL)+
theme_classic()
ggsave("resultats/diagrammes/20230418_PB_DistribLittNationale2termes.png", dpi=300)
DistribPaysPublication <- ggplot(paysPublication_N[N>10],
aes(x = reorder(paysAssocie, N), y=N)) +
geom_bar(stat = "identity")+
coord_flip() +
geom_text(aes(label = N),
hjust = 0,
vjust = +0.7,
size = 2.5,
colour = "black")+
labs(title = "Distribution des documents selon les principaux pays de publication",
caption = "Données: BANQ, 2023")+
xlab(NULL)+
ylab(NULL)+
theme_classic()
ggsave("resultats/diagrammes/20230418_PB_DistribPaysPublication.png", dpi=300)
DistribLitteratureNationale <- ggplot(litteratureNationaleEtiquettes2termes_N[1:10],
aes(x = reorder(etiquettes2termes, N), y=N)) +
geom_bar(stat = "identity")+
coord_flip() +
geom_text(aes(label = N),
hjust = 0,
vjust = +0.7,
size = 2.5,
colour = "black")+
labs(title = "Distribution des documents selon la nationalité de l'auteur·e",
caption = "Données: BANQ, 2023")+
xlab(NULL)+
ylab(NULL)+
theme_classic()
ggsave("resultats/diagrammes/20230418_PB_DistribLittNationale2termes.png", dpi=300)
---
title: "Tableau de bord"
rmarkdown::draft(file = "my_dashboard",
template = "flex_dashboard",
package = "flexdashboard")
install.packages("flexdashboard")
library(flexdashboard)
source("fonctions.R")
rm(list = setdiff(ls(), c(
"data",
"slicing_f",
"separerCompter_f",
"graphique_f"
)))
View(data)
source(c("fonctions.R", "enrichissement.R")
rm(list = setdiff(ls(), c(
source(c("fonctions.R", "enrichissement.R"))
source("fonctions.R")
source("enrichissement.R")
source("fonctions.R")
source("enrichissement.R")
rm(list = setdiff(ls(), c(
"data",
"slicing_f",
"separerCompter_f",
"graphique_f"
)))
View(data)
c(unique(data$roman_nouvelle), "roman et nouvelle")
data$roman_nouvelle
unique(data$roman_nouvelle)
c(as.character(unique(data$roman_nouvelle)), "roman et nouvelle")
data$langue
View(data)
data[pays == "FR", pays:="fr"]
data[pays == "cc", pays:="ch"]
data[pays == "enk", pays:="uk"]
data[pays == "xxk", pays:="uk"]
# Importation de la table des sigles (champs Pays) et des équivalences (noms complets, pays associés)
siglesPaysEquiv <- fread("donnees/202304_PB_siglesPaysEquiv.csv")
siglesPaysEquiv
data <- merge.data.table(data, siglesPaysEquiv, by.x = "pays", by.y = "sigle")
View(data)
unique(data$paysAssocie)
View(data)
data[, , etiquettes2termes:=str_extract(litterature_nationale, pattern = "^[[:alpha:]]+\\s[[:alpha:]-]+")]
data[, etiquettes2termes:=str_extract(litterature_nationale, pattern = "^[[:alpha:]]+\\s[[:alpha:]-]+")]
View(data)
as.character(unique(data$roman_nouvelle))
data[annee_de_publication == 2023, .N]
data[annee_de_publication == 2022, .N]
data$genre_litteraire
strsplit(data$genre_litteraire[1:50], ";")
strsplit(data$genre_litteraire[1:50], ".+(?=;)")
str_extract(genre_litteraire, pattern = ".+(?=;)")
str_extract(data$genre_litteraire, pattern = ".+(?=;)")
str_extract(data$genre_litteraire, pattern = "[^[:punct:]]+(?=;|$)")
# Genre littéraire
data[, .(genre_litteraire)][
, genre_litt_l:=strsplit(genre_litteraire, pattern = ";")]
View(data)
# Genre littéraire
data[, .(genre_litteraire)][
, genre_litt_l:=strsplit(genre_litteraire, ";")]
View(data)
View(data)
# Genre littéraire
data[, genre_litt_l:=strsplit(genre_litteraire, ";")]
View(data)
max(length(data$genre_litt_l))
max(sapply(data$genre_litt_l, length))
sapply(data$genre_litt_l, '[')
data$genre_litt_l[1:10][[1]]
data$genre_litt_l[1:10]
data$genre_litt_l[[1:10]][1]
data$genre_litt_l[1:10][2]
sapply(data$genre_litt_l, '[[', 1)
sapply(data$genre_litt_l, '[[', 2)
sapply(data$genre_litt_l, '[[', 1)
sapply(data$genre_litt_l, '[[', 2)
sapply(data$genre_litt_l, '[', 1)
sapply(data$genre_litt_l, '[', 2)
data[, `:=`(genre_litt_1 = sapply(genre_litt_l, '[', 1),
genre_litt_2 = sapply(genre_litt_l, '[', 2),
genre_litt_3 = sapply(genre_litt_l, '[', 3),
genre_litt_4 = sapply(genre_litt_l, '[', 4))]
View(data)
unique(data$genre_litt_1)
unique(as.vector(data[!is.na(genre_litt_l)]))
unique(data[!is.na(genre_litt_l)])
data[!is.na(genre_litt_1)]$genre_litt_1
unique(data[!is.na(genre_litt_1)]$genre_litt_1)
View(data)
runApp('StatistiquesDescriptivesApp')
library(dplyr)
runApp('StatistiquesDescriptivesApp')
table(data$langue)
table(data$genre_litt_1)
table(data$paysAssocie)
data[annee_publication >= 1900 &
annee_publication <= 1990 &
langue %in% "fre" &
genre_litt_1 %in% c("Romans policiers") &
pays %in% c("Canada")
, .N]
data[annee_de_publication >= 1900 &
annee_de_publication <= 1990 &
langue %in% "fre" &
genre_litt_1 %in% c("Romans policiers") &
pays %in% c("Canada")
, .N]
data[annee_de_publication >= 1900, .N]
data[annee_de_publication >= 1900 &
annee_de_publication <= 2000, .N]
data[annee_de_publication >= 1900 &
annee_de_publication <= 2000 &
langue %in% c("fre"), .N]
data[annee_de_publication >= 1900 &
annee_de_publication <= 2000 &
langue %in% c("fre") &
paysAssocie %in% "Canada", .N]
data[annee_de_publication >= 1900 &
annee_de_publication <= 2000 &
langue %in% c("fre") &
paysAssocie %in% "Canada" &
genre_litt_l %in% "Littérature de filles", .N]
data[annee_de_publication >= 1900 &
annee_de_publication <= 2000 &
langue %in% c("fre") &
paysAssocie %in% "Canada" &
genre_litt_l %in% "Romans policiers", .N]
data[annee_de_publication >= 1900 &
annee_de_publication <= 2000 &
langue %in% c("fre") &
paysAssocie %in% "Canada" &
genre_litt_l %in% "Romans policiers", .N] |> count(paysAssocies)
data[annee_de_publication >= 1900 &
annee_de_publication <= 2000 &
langue %in% c("fre") &
# paysAssocie %in% "Canada" &
genre_litt_l %in% "Romans policiers", .N] |> count(paysAssocies)
data[annee_de_publication >= 1900 &
annee_de_publication <= 2000 &
langue %in% c("fre") &
# paysAssocie %in% "Canada" &
genre_litt_l %in% "Romans policiers", .N] |> table(paysAssocies)
data[annee_de_publication >= 1900 &
annee_de_publication <= 2000 &
langue %in% c("fre") &
# paysAssocie %in% "Canada" &
genre_litt_l %in% "Romans policiers", .N] |> table(paysAssocie)
data[annee_de_publication >= 1900 &
annee_de_publication <= 2000 &
langue %in% c("fre") &
# paysAssocie %in% "Canada" &
genre_litt_l %in% "Romans policiers", .N]
data[annee_de_publication >= 1900 &
annee_de_publication <= 2000 &
langue %in% c("fre") &
# paysAssocie %in% "Canada" &
genre_litt_l %in% "Romans policiers"] |> count(paysAssocie)
runApp('StatistiquesDescriptivesApp')
runApp('StatistiquesDescriptivesApp')
runApp()
runApp()
runApp()
runApp()
source("enrichissement.R")
source("fonctions.R")
rm(list = setdiff(ls(), c(
"data",
"slicing_f",
"separerCompter_f",
"graphique_f"
)))
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
View(data)
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
data$roman_nouvelle
as.character(data$roman_nouvelle)
unique(as.character(data$roman_nouvelle))
unique(as.character(data$roman_nouvelle))
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
unique(data$genre_litt_1)
data[!is.na(genre_litteraire_1), .(genre_litteraire_1)]
data[!is.na(genre_litt_1), .(genre_litt_1)]
data[!is.na(genre_litt_1), .(genre_litt_1)][unique(genre_litt_1)]
data[!is.na(genre_litt_1), .(genre_litt_1)][!duplicated(genre_litt_1)]
runApp('~/github/PERSONNEL/202304RomansAlireApp')
data[!is.na(genre_litt_1) & !duplicated(genre_litt_1) & genre_litt_1 %ilike% "roman", .(genre_litt_1)] |> as.vector()
data[!is.na(genre_litt_1) & !duplicated(genre_litt_1) & genre_litt_1 %ilike% "roman", .(genre_litt_1)] |> unlist()
data[!is.na(genre_litt_1) & !duplicated(genre_litt_1) & genre_litt_1 %ilike% "roman", .(genre_litt_1)] as.character()
data[!is.na(genre_litt_1) & !duplicated(genre_litt_1) & genre_litt_1 %ilike% "roman", .(genre_litt_1)] |> as.character()
data[!is.na(genre_litt_1) & !duplicated(genre_litt_1) & genre_litt_1 %ilike% "roman", .(genre_litt_1)] |> as.character() |> unlist()
data[!is.na(genre_litt_1) & !duplicated(genre_litt_1) & genre_litt_1 %ilike% "roman", .(genre_litt_1)] |> as.list() |> unlist()
data[!is.na(genre_litt_1) & !duplicated(genre_litt_1) & genre_litt_1 %ilike% "roman", .(genre_litt_1)] |> pull()
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
data[!is.na(lieuSigleNomsComplet) & !duplicated(lieuSigleNomsComplet) & lieuSigleNomsComplet %ilike% "roman", .(lieuSigleNomsComplet)] |> pull()
data[!is.na(lieuSigleNomsComplet) & !duplicated(lieuSigleNomsComplet), .(lieuSigleNomsComplet)] |> pull()
data[!lieuSigleNomsComplet == "" & !duplicated(lieuSigleNomsComplet), .(lieuSigleNomsComplet)] |> pull()
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
testList <- data.table(a = c("a", "b", "c"),
b = list("a", NA, c("d", "e", "f")))
testList
testList[a %in% "e"]
testList[a %in% "a"]
testList[a %in% "b"]
testList[a %in% "c"]
testList[b %in% "f"]
sapply(testList, str_detect, f)
sapply(testList, str_detect, "f")
sapply(testList$b, str_detect, "f")
testList[b %in% "f"]
testList[sapply(b, grepl, "f"), ]
testList[grepl(b, "f"), ]
testList[grepl("f", b), ]
testList[grepl("f", b), ]
testList[b %in% "f"]
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
str(data)
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
View(data)
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
unique(as.character(data$roman_nouvelle))
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
# Structure du répertoire
if(!dir.exists("resultats")) dir.create("resultats")
if(!dir.exists("resultats/diagrammes")) dir.create("resultats/diagrammes")
if(!dir.exists("resultats/tables")) dir.create("resultats/tables")
#### Importation et prétraitement des données ----
source("fonctions.R")
# Structure du répertoire
if(!dir.exists("resultats")) dir.create("resultats")
if(!dir.exists("resultats/diagrammes")) dir.create("resultats/diagrammes")
if(!dir.exists("resultats/tables")) dir.create("resultats/tables")
#### Importation et prétraitement des données ----
source("fonctions.R")
rm(list = setdiff(ls(), c(
"data",
"slicing_f",
"separerCompter_f",
"graphique_f"
)))
data[, .N]
data.table(NbreObservationsTotal = data[, .N],
NbreTitresUniques = data[!duplicated(data$titre), .N])
View(data)
# Structure du répertoire
if(!dir.exists("resultats")) dir.create("resultats")
if(!dir.exists("resultats/diagrammes")) dir.create("resultats/diagrammes")
if(!dir.exists("resultats/tables")) dir.create("resultats/tables")
#### Importation et prétraitement des données ----
source("fonctions.R")
rm(list = setdiff(ls(), c(
"data",
"slicing_f",
"separerCompter_f",
"graphique_f"
)))
#### Nombre de titres uniques ----
TitresUniques <- data.table(NbreObservationsTotal = data[, .N],
NbreTitresUniques = data[!duplicated(data$titre), .N])
fwrite(TitresUniques, "resultats/tables/20240423_PB_TitresUniques.csv")
#### Distribution selon la langue du texte ----
LangueTexte <- data.table(LangueTexte = names(table(data$langue)),
N = as.vector(table(data$langue)))
LangueTexte_order_dt <- LangueTexte[order(-N)]
fwrite(LangueTexte_order_dt, "resultats/tables/20230423_PB_DistribLangueTexte.csv")
#### Distribution selon le genre (roman/nouvelle) ----
# Création d'une colonne catégorielle roman/nouvelle
data$roman_nouvelle <- ifelse(data$genre_litteraire %ilike% "roman", "roman", "nouvelle") |> factor()
# Données pour tableau
DistribRomanNouvelle_dt <- data[, .(roman_nouvelle)][, .N, "roman_nouvelle"]
distrib_docs_genre<- graphique_f(DistribRomanNouvelle_dt,
x = roman_nouvelle,
y = N,
flip = FALSE,
reorder = FALSE,
titre = "Distribution des documents selon le genre (roman/nouvelle)")
ggsave("resultats/diagrammes/20230418_PB_DistribGenreLitt.png", dpi=300)
# # PieChart
# png(filename = "resultats/diagrammes/20230423_PB_DistribRomanNouvelles_PieChart.png",
#     width = 1200,
#     height = 1200)
# PieChart(x = roman_nouvelle,
#          cex = 2,
#          data = data,
#          hole = 0.5,
#          fill = "blues",
#          color = "black",
#          lwd = 2,
#          lty = 1,
#          values_color = c("black", "white"),
#          main = 'Distribution des documents\nselon le "genre"')
#
# dev.off()
#### Distribution selon l'année de publication ----
# Création d'une table avec la fonction
distrib_decennies <- data[!is.na(annee_de_publication), .(numero_de_sequence, annee_de_publication)][
, decennies:=slicing_f(annee_de_publication)][
,.N, by="decennies"][
order(decennies, decreasing = TRUE)]
# Création d'un diagramme avec cette table
distrib_docs_decennies <- graphique_f(distrib_decennies,
x =decennies,
y = N,
titre = "Distribution chronologique des documents par décennies",
flip = FALSE)
# Exportation du diagramme
ggsave("resultats/diagrammes/20230418_PB_DistribChronologiqueDecennies.png", dpi=300)
# Exportation de la table sous forme de .csv
fwrite(distrib_decennies, "resultats/tables/20230418_PB_DistribChronologiqueDecennies.csv")
#### Distribution par pays de publication ----
# Corrections (la modalité indiquée d'abord est remplacée par la seconde):
data[pays == "FR", pays:="fr"]
data[pays == "cc", pays:="ch"]
data[pays == "enk", pays:="uk"]
data[pays == "xxk", pays:="uk"]
# Création d'une table
pays_distrib <- data.table(sigle = names(table(data$pays)),
N = as.vector(table(data$pays)))
# Importation de la table des sigles (champs Pays) et des équivalences (noms complets, pays associés)
siglesPaysEquiv <- fread("donnees/202304_PB_siglesPaysEquiv.csv")
# Croisement des tables
paysPublication <- merge.data.table(data[, .(numero_de_sequence, pays)], siglesPaysEquiv, by.x = "pays", by.y = "sigle")
paysPublication_N <- paysPublication[, .N, by="paysAssocie"][
order(N, decreasing = TRUE)
]
paysPublication_order_dt <- paysPublication_N[N>3]
DistribPaysPublication <- graphique_f(paysPublication_order_dt,
x = paysAssocie,
y = N,
titre = "Distribution des documents selon les principaux pays de publication")
ggsave("resultats/diagrammes/20230418_PB_DistribPaysPublication.png", dpi=300)
# Exportation de la table sous forme de .csv
fwrite(paysPublication_N, "resultats/tables/20230418_PB_DistribPaysPublication.csv")
#### Littérature nationale (étiquettes originales et à deux termes (genre + nationalité)) ----
# Utilisation des étiquettes originales (631 étiquettes uniques)
litteratureNationaleEtiquettesOriginales_N <- data[, .(litterature_nationale)][
, .N, "litterature_nationale"][
order(N, decreasing = TRUE)
]
# Exportation de la table sous forme de .csv
fwrite(litteratureNationale_N, "resultats/tables/20230418_PB_litteratureNationaleEtiquettesOriginales.csv")
# Diagramme (10 premières entrées)
DistribLitteratureNationale <- graphique_f(litteratureNationaleEtiquettes2termes_order_dt_N,
x = etiquettes2termes,
y = N,
titre = "Distribution des documents selon les modalités du champ `Littérature nationale`"
)
# Données pour diagramme
litteratureNationaleEtiquettes2termes_order_dt_N <- litteratureNationaleEtiquettes2termes_N[1:15]
# Utilisation des étiquettes originales (631 étiquettes uniques)
litteratureNationaleEtiquettesOriginales_N <- data[, .(litterature_nationale)][
, .N, "litterature_nationale"][
order(N, decreasing = TRUE)
]
litteratureNationaleEtiquettesOriginales_N
# Extraction des deux premiers termes des étiquettes originales (romans/nouvelles + nationalité)
litteratureNationaleEtiquettes2termes_N <- data[, .(litterature_nationale)][
, etiquettes2termes:=str_extract(litterature_nationale, pattern = "^[[:alpha:]]+\\s[[:alpha:]-]+")][
, .N, "etiquettes2termes"][
order(N, decreasing = TRUE)]
# Données pour diagramme
litteratureNationaleEtiquettes2termes_order_dt_N <- litteratureNationaleEtiquettes2termes_N[1:15]
# Diagramme (10 premières entrées)
DistribLitteratureNationale <- graphique_f(litteratureNationaleEtiquettes2termes_order_dt_N,
x = etiquettes2termes,
y = N,
titre = "Distribution des documents selon les modalités du champ `Littérature nationale`"
)
DistribLitteratureNationale
ggsave("resultats/diagrammes/20230418_PB_DistribLittNationale2termes.png", dpi=300)
