)))
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
View(data)
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
data$roman_nouvelle
as.character(data$roman_nouvelle)
unique(as.character(data$roman_nouvelle))
unique(as.character(data$roman_nouvelle))
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
unique(data$genre_litt_1)
data[!is.na(genre_litteraire_1), .(genre_litteraire_1)]
data[!is.na(genre_litt_1), .(genre_litt_1)]
data[!is.na(genre_litt_1), .(genre_litt_1)][unique(genre_litt_1)]
data[!is.na(genre_litt_1), .(genre_litt_1)][!duplicated(genre_litt_1)]
runApp('~/github/PERSONNEL/202304RomansAlireApp')
data[!is.na(genre_litt_1) & !duplicated(genre_litt_1) & genre_litt_1 %ilike% "roman", .(genre_litt_1)] |> as.vector()
data[!is.na(genre_litt_1) & !duplicated(genre_litt_1) & genre_litt_1 %ilike% "roman", .(genre_litt_1)] |> unlist()
data[!is.na(genre_litt_1) & !duplicated(genre_litt_1) & genre_litt_1 %ilike% "roman", .(genre_litt_1)] as.character()
data[!is.na(genre_litt_1) & !duplicated(genre_litt_1) & genre_litt_1 %ilike% "roman", .(genre_litt_1)] |> as.character()
data[!is.na(genre_litt_1) & !duplicated(genre_litt_1) & genre_litt_1 %ilike% "roman", .(genre_litt_1)] |> as.character() |> unlist()
data[!is.na(genre_litt_1) & !duplicated(genre_litt_1) & genre_litt_1 %ilike% "roman", .(genre_litt_1)] |> as.list() |> unlist()
data[!is.na(genre_litt_1) & !duplicated(genre_litt_1) & genre_litt_1 %ilike% "roman", .(genre_litt_1)] |> pull()
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
data[!is.na(lieuSigleNomsComplet) & !duplicated(lieuSigleNomsComplet) & lieuSigleNomsComplet %ilike% "roman", .(lieuSigleNomsComplet)] |> pull()
data[!is.na(lieuSigleNomsComplet) & !duplicated(lieuSigleNomsComplet), .(lieuSigleNomsComplet)] |> pull()
data[!lieuSigleNomsComplet == "" & !duplicated(lieuSigleNomsComplet), .(lieuSigleNomsComplet)] |> pull()
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
testList <- data.table(a = c("a", "b", "c"),
b = list("a", NA, c("d", "e", "f")))
testList
testList[a %in% "e"]
testList[a %in% "a"]
testList[a %in% "b"]
testList[a %in% "c"]
testList[b %in% "f"]
sapply(testList, str_detect, f)
sapply(testList, str_detect, "f")
sapply(testList$b, str_detect, "f")
testList[b %in% "f"]
testList[sapply(b, grepl, "f"), ]
testList[grepl(b, "f"), ]
testList[grepl("f", b), ]
testList[grepl("f", b), ]
testList[b %in% "f"]
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
str(data)
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
View(data)
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
unique(as.character(data$roman_nouvelle))
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
runApp('~/github/PERSONNEL/202304RomansAlireApp')
# Structure du répertoire
if(!dir.exists("resultats")) dir.create("resultats")
if(!dir.exists("resultats/diagrammes")) dir.create("resultats/diagrammes")
if(!dir.exists("resultats/tables")) dir.create("resultats/tables")
#### Importation et prétraitement des données ----
source("fonctions.R")
# Structure du répertoire
if(!dir.exists("resultats")) dir.create("resultats")
if(!dir.exists("resultats/diagrammes")) dir.create("resultats/diagrammes")
if(!dir.exists("resultats/tables")) dir.create("resultats/tables")
#### Importation et prétraitement des données ----
source("fonctions.R")
rm(list = setdiff(ls(), c(
"data",
"slicing_f",
"separerCompter_f",
"graphique_f"
)))
data[, .N]
data.table(NbreObservationsTotal = data[, .N],
NbreTitresUniques = data[!duplicated(data$titre), .N])
View(data)
# Structure du répertoire
if(!dir.exists("resultats")) dir.create("resultats")
if(!dir.exists("resultats/diagrammes")) dir.create("resultats/diagrammes")
if(!dir.exists("resultats/tables")) dir.create("resultats/tables")
#### Importation et prétraitement des données ----
source("fonctions.R")
rm(list = setdiff(ls(), c(
"data",
"slicing_f",
"separerCompter_f",
"graphique_f"
)))
#### Nombre de titres uniques ----
TitresUniques <- data.table(NbreObservationsTotal = data[, .N],
NbreTitresUniques = data[!duplicated(data$titre), .N])
fwrite(TitresUniques, "resultats/tables/20240423_PB_TitresUniques.csv")
#### Distribution selon la langue du texte ----
LangueTexte <- data.table(LangueTexte = names(table(data$langue)),
N = as.vector(table(data$langue)))
LangueTexte_order_dt <- LangueTexte[order(-N)]
fwrite(LangueTexte_order_dt, "resultats/tables/20230423_PB_DistribLangueTexte.csv")
#### Distribution selon le genre (roman/nouvelle) ----
# Création d'une colonne catégorielle roman/nouvelle
data$roman_nouvelle <- ifelse(data$genre_litteraire %ilike% "roman", "roman", "nouvelle") |> factor()
# Données pour tableau
DistribRomanNouvelle_dt <- data[, .(roman_nouvelle)][, .N, "roman_nouvelle"]
distrib_docs_genre<- graphique_f(DistribRomanNouvelle_dt,
x = roman_nouvelle,
y = N,
flip = FALSE,
reorder = FALSE,
titre = "Distribution des documents selon le genre (roman/nouvelle)")
ggsave("resultats/diagrammes/20230418_PB_DistribGenreLitt.png", dpi=300)
# # PieChart
# png(filename = "resultats/diagrammes/20230423_PB_DistribRomanNouvelles_PieChart.png",
#     width = 1200,
#     height = 1200)
# PieChart(x = roman_nouvelle,
#          cex = 2,
#          data = data,
#          hole = 0.5,
#          fill = "blues",
#          color = "black",
#          lwd = 2,
#          lty = 1,
#          values_color = c("black", "white"),
#          main = 'Distribution des documents\nselon le "genre"')
#
# dev.off()
#### Distribution selon l'année de publication ----
# Création d'une table avec la fonction
distrib_decennies <- data[!is.na(annee_de_publication), .(numero_de_sequence, annee_de_publication)][
, decennies:=slicing_f(annee_de_publication)][
,.N, by="decennies"][
order(decennies, decreasing = TRUE)]
# Création d'un diagramme avec cette table
distrib_docs_decennies <- graphique_f(distrib_decennies,
x =decennies,
y = N,
titre = "Distribution chronologique des documents par décennies",
flip = FALSE)
# Exportation du diagramme
ggsave("resultats/diagrammes/20230418_PB_DistribChronologiqueDecennies.png", dpi=300)
# Exportation de la table sous forme de .csv
fwrite(distrib_decennies, "resultats/tables/20230418_PB_DistribChronologiqueDecennies.csv")
#### Distribution par pays de publication ----
# Corrections (la modalité indiquée d'abord est remplacée par la seconde):
data[pays == "FR", pays:="fr"]
data[pays == "cc", pays:="ch"]
data[pays == "enk", pays:="uk"]
data[pays == "xxk", pays:="uk"]
# Création d'une table
pays_distrib <- data.table(sigle = names(table(data$pays)),
N = as.vector(table(data$pays)))
# Importation de la table des sigles (champs Pays) et des équivalences (noms complets, pays associés)
siglesPaysEquiv <- fread("donnees/202304_PB_siglesPaysEquiv.csv")
# Croisement des tables
paysPublication <- merge.data.table(data[, .(numero_de_sequence, pays)], siglesPaysEquiv, by.x = "pays", by.y = "sigle")
paysPublication_N <- paysPublication[, .N, by="paysAssocie"][
order(N, decreasing = TRUE)
]
paysPublication_order_dt <- paysPublication_N[N>3]
DistribPaysPublication <- graphique_f(paysPublication_order_dt,
x = paysAssocie,
y = N,
titre = "Distribution des documents selon les principaux pays de publication")
ggsave("resultats/diagrammes/20230418_PB_DistribPaysPublication.png", dpi=300)
# Exportation de la table sous forme de .csv
fwrite(paysPublication_N, "resultats/tables/20230418_PB_DistribPaysPublication.csv")
#### Littérature nationale (étiquettes originales et à deux termes (genre + nationalité)) ----
# Utilisation des étiquettes originales (631 étiquettes uniques)
litteratureNationaleEtiquettesOriginales_N <- data[, .(litterature_nationale)][
, .N, "litterature_nationale"][
order(N, decreasing = TRUE)
]
# Exportation de la table sous forme de .csv
fwrite(litteratureNationale_N, "resultats/tables/20230418_PB_litteratureNationaleEtiquettesOriginales.csv")
# Diagramme (10 premières entrées)
DistribLitteratureNationale <- graphique_f(litteratureNationaleEtiquettes2termes_order_dt_N,
x = etiquettes2termes,
y = N,
titre = "Distribution des documents selon les modalités du champ `Littérature nationale`"
)
# Données pour diagramme
litteratureNationaleEtiquettes2termes_order_dt_N <- litteratureNationaleEtiquettes2termes_N[1:15]
# Utilisation des étiquettes originales (631 étiquettes uniques)
litteratureNationaleEtiquettesOriginales_N <- data[, .(litterature_nationale)][
, .N, "litterature_nationale"][
order(N, decreasing = TRUE)
]
litteratureNationaleEtiquettesOriginales_N
# Extraction des deux premiers termes des étiquettes originales (romans/nouvelles + nationalité)
litteratureNationaleEtiquettes2termes_N <- data[, .(litterature_nationale)][
, etiquettes2termes:=str_extract(litterature_nationale, pattern = "^[[:alpha:]]+\\s[[:alpha:]-]+")][
, .N, "etiquettes2termes"][
order(N, decreasing = TRUE)]
# Données pour diagramme
litteratureNationaleEtiquettes2termes_order_dt_N <- litteratureNationaleEtiquettes2termes_N[1:15]
# Diagramme (10 premières entrées)
DistribLitteratureNationale <- graphique_f(litteratureNationaleEtiquettes2termes_order_dt_N,
x = etiquettes2termes,
y = N,
titre = "Distribution des documents selon les modalités du champ `Littérature nationale`"
)
DistribLitteratureNationale
ggsave("resultats/diagrammes/20230418_PB_DistribLittNationale2termes.png", dpi=300)
# Statistiques descriptives de la base de données Romans à lire (BANQ) ----
## Auteur: Pascal Brissette (U. McGill)
## Commentaires et questions: pascal.brissette@mcgill.ca
# Structure du répertoire
if(!dir.exists("resultats")) dir.create("resultats")
if(!dir.exists("resultats/diagrammes")) dir.create("resultats/diagrammes")
if(!dir.exists("resultats/tables")) dir.create("resultats/tables")
#### Importation et prétraitement des données ----
source("fonctions.R")
rm(list = setdiff(ls(), c(
"data",
"slicing_f",
"separerCompter_f",
"graphique_f"
)))
data[, .N, .(annee_de_publication)]
data[annee_de_publication == 2023]
data[annee_de_publication == 2022, .(numero_de_sequence)]
data[annee_de_publication < 1850, .(numero_de_sequence)]
data[min(annee_de_publication) , .(numero_de_sequence)]
data[min(annee_de_publication) , .(annee_de_publication)]
data[numero_de_sequence %in% c(160388, 176325, 475707) , .(annee_de_publication)]
Titanic
as.data.table(Titanic)
read_excel("~/Downloads/titanic3.xls")
titanic <- read_excel("~/Downloads/titanic3.xls")
titanic
titanic
titanic |> filter(survived == 0)
1309-809
setDT(titanic)
# Structure du répertoire
if(!dir.exists("resultats")) dir.create("resultats")
if(!dir.exists("resultats/diagrammes")) dir.create("resultats/diagrammes")
if(!dir.exists("resultats/tables")) dir.create("resultats/tables")
#### Importation et prétraitement des données ----
source("fonctions.R")
rm(list = setdiff(ls(), c(
"data",
"slicing_f",
"separerCompter_f",
"graphique_f"
)))
data[numero_de_sequence %in% c(160388, 176325, 475707) , .(annee_de_publication)]
# Création d'une table avec la fonction
distrib_decennies <- data[!is.na(annee_de_publication), .(numero_de_sequence, annee_de_publication)][
, decennies:=slicing_f(annee_de_publication)][
,.N, by="decennies"][
order(decennies, decreasing = TRUE)]
distrib_decennies
# Création d'un diagramme avec cette table
distrib_docs_decennies <- graphique_f(distrib_decennies,
x =decennies,
y = N,
titre = "Distribution chronologique des documents par décennies",
flip = FALSE)
distrib_docs_decennies
distrib_decennies <- data[!is.na(annee_de_publication), .(numero_de_sequence, annee_de_publication)][
, decennies:=slicing_f(annee_de_publication)][
,.N, by="decennies"]
str(distrib_decennies)
order(decennies)
graphique_f(distrib_decennies,
x =order(decennies),
y = N,
titre = "Distribution chronologique des documents par décennies",
flip = FALSE)
graphique_f(distrib_decennies,
x =order(-decennies),
y = N,
titre = "Distribution chronologique des documents par décennies",
flip = FALSE)
data[!is.na(annee_de_publication), .(numero_de_sequence, annee_de_publication)][
, decennies:=slicing_f(annee_de_publication)][
,.N, by="decennies"]
data[!is.na(annee_de_publication), .(numero_de_sequence, annee_de_publication)][
, decennies:=slicing_f(annee_de_publication)][
,.N, by="decennies"][
decennies:=factor(decennies, levels = c(1830, 1840, 1860, 1870, 1880, 1890,1900,1910,1920,1930,
1940, 1950, 1960, 1970, 1990, 2000, 2010, 2020))]
data[!is.na(annee_de_publication), .(numero_de_sequence, annee_de_publication)][
, decennies:=slicing_f(annee_de_publication)][
,.N, by="decennies"][
decennies:=as.factor(decennies, levels = c(1830, 1840, 1860, 1870, 1880, 1890,1900,1910,1920,1930,
1940, 1950, 1960, 1970, 1990, 2000, 2010, 2020))]
data[!is.na(annee_de_publication), .(numero_de_sequence, annee_de_publication)][
, decennies:=slicing_f(annee_de_publication)][
,.N, by="decennies"][
decennies:=as.factor(decennies, levels = c("1830", "1840", "1860", "1870", "1880", "1890","1900","1910","1920","1930",
"1940", "1950", "1960", "1970", "1990", "2000", "2010", "2020"))]
data[!is.na(annee_de_publication), .(numero_de_sequence, annee_de_publication)][
, decennies:=slicing_f(annee_de_publication)][
,.N, by="decennies"][order(decennies)]
distrib_decennies <- data[!is.na(annee_de_publication), .(numero_de_sequence, annee_de_publication)][
, decennies:=slicing_f(annee_de_publication)][
,.N, by="decennies"][order(decennies)]
graphique_f(distrib_decennies,
x =decennies,
y = N,
titre = "Distribution chronologique des documents par décennies",
flip = FALSE)
graphique_f(distrib_decennies,
x =reorder(decennies, decennies),
y = N,
titre = "Distribution chronologique des documents par décennies",
flip = FALSE)
graphique_f(distrib_decennies,
x =reorder(decennies, function(x) order(decennies)),
y = N,
titre = "Distribution chronologique des documents par décennies",
flip = FALSE)
graphique_f(distrib_decennies,
x =reorder(decennies, function(x) order(x)),
y = N,
titre = "Distribution chronologique des documents par décennies",
flip = FALSE)
graphique_f(distrib_decennies,
x =reorder(decennies, sort(decennies)),
y = N,
titre = "Distribution chronologique des documents par décennies",
flip = FALSE)
graphique_f(distrib_decennies,
x =reorder(decennies, sort(-decennies)),
y = N,
titre = "Distribution chronologique des documents par décennies",
flip = FALSE)
graphique_f(distrib_decennies,
x =reorder(decennies, order(decennies)),
y = N,
titre = "Distribution chronologique des documents par décennies",
flip = FALSE)
# decennies:=as.factor(decennies, levels = c("1830", "1840", "1860", "1870", "1880", "1890","1900","1910","1920","1930",
#                                               "1940", "1950", "1960", "1970", "1990", "2000", "2010", "2020"))]
str(distrib_decennies)
# decennies:=as.factor(decennies, levels = c("1830", "1840", "1860", "1870", "1880", "1890","1900","1910","1920","1930",
#                                               "1940", "1950", "1960", "1970", "1990", "2000", "2010", "2020"))]
as.numeric(distrib_decennies$decennies)
# decennies:=as.factor(decennies, levels = c("1830", "1840", "1860", "1870", "1880", "1890","1900","1910","1920","1930",
#                                               "1940", "1950", "1960", "1970", "1990", "2000", "2010", "2020"))]
names(distrib_decennies$decennies)
distrib_decennies$decennies
levels(distrib_decennies$decennies)
graphique_f(distrib_decennies,
x =reorder(decennies, levels(decennies)),
y = N,
titre = "Distribution chronologique des documents par décennies",
flip = FALSE)
graphique_f(distrib_decennies,
x =reorder(decennies, levels(as.numeric(decennies))),
y = N,
titre = "Distribution chronologique des documents par décennies",
flip = FALSE)
str(distrib_decennies)
# decennies:=as.factor(decennies, levels = c("1830", "1840", "1860", "1870", "1880", "1890","1900","1910","1920","1930",
#                                               "1940", "1950", "1960", "1970", "1990", "2000", "2010", "2020"))]
levels(distrib_decennies$decennies)
# decennies:=as.factor(decennies, levels = c("1830", "1840", "1860", "1870", "1880", "1890","1900","1910","1920","1930",
#                                               "1940", "1950", "1960", "1970", "1990", "2000", "2010", "2020"))]
as.integer(levels(distrib_decennies$decennies))
graphique_f(distrib_decennies,
x =reorder(decennies, as.integer(levels(distrib_decennies$decennies))),
y = N,
titre = "Distribution chronologique des documents par décennies",
flip = FALSE)
graphique_f(distrib_decennies,
x = order(as.integer(levels(distrib_decennies$decennies))),
y = N,
titre = "Distribution chronologique des documents par décennies",
flip = FALSE)
graphique_f(distrib_decennies,
x = sort(as.integer(levels(distrib_decennies$decennies))),
y = N,
titre = "Distribution chronologique des documents par décennies",
flip = FALSE)
graphique_f(distrib_decennies,
x = reorder(decennies, as.integer(levels(distrib_decennies$decennies))),
y = N,
titre = "Distribution chronologique des documents par décennies",
flip = FALSE)
distrib_decennies <- data[!is.na(annee_de_publication), .(numero_de_sequence, annee_de_publication)][
, decennies:=slicing_f(annee_de_publication)][
,.N, by="decennies"][order(decennies)]
distrib_decennies
within(distrib_decennies,
decennies <- factor(decennies,
levels=names(sort(table(decennies),
decreasing=TRUE))))
distrib_decennies_t <- within(distrib_decennies,
decennies <- factor(decennies,
levels=names(sort(table(decennies),
decreasing=TRUE))))
graphique_f(distrib_decennies_t,
x = reorder(decennies, as.integer(levels(distrib_decennies$decennies))),
y = N,
titre = "Distribution chronologique des documents par décennies",
flip = FALSE)
graphique_f(distrib_decennies_t,
x = decennies,
y = N,
titre = "Distribution chronologique des documents par décennies",
flip = FALSE)
reorder(decennies, names(sort(table(decennies))))
graphique_f(distrib_decennies_t,
x = reorder(decennies, names(sort(table(decennies)))),
y = N,
titre = "Distribution chronologique des documents par décennies",
flip = FALSE)
names(sort(table(distrib_decennies$decennies)))
ggplot(distrib_decennies, aes(x = decennies,
y = N))+
geom_bar(stat = "identity")
ggplot(distrib_decennies, aes(x = decennies,
y = N))+
geom_bar(stat = "identity")+
labs(title = "Distribution chronologique des documents par décennies",
caption = "Données: BANQ, 2023")+
xlab(NULL)+
ylab(NULL)+
theme_classic()
ggplot(distrib_decennies, aes(x = decennies,
y = N))+
geom_bar(stat = "identity")+
labs(title = "Distribution chronologique des documents par décennies",
caption = "Données: BANQ, 2023")+
xlab(NULL)+
ylab(NULL)+
theme_classic() +
geom_text(aes(label = N),
hjust = 0.5,
vjust = -0.7,
size = 2.5,
colour = "black")
distrib_decennies
distrib_decennies[, -(2020)]
distrib_decennies[, -.(2020)]
distrib_decennies[, .(2020)]
distrib_decennies[, -c("2020")]
distrib_decennies[, -c(2020)]
distrib_decennies[, -c(1:19)]
distrib_decennies[, c(1:19)]
distrib_decennies[, 1:19]
distrib_decennies
distrib_decennies[1:19]
ggplot(distrib_decennies[1:19], aes(x = decennies, y = N)) +
geom_bar(stat = "identity") +
labs(title = "Distribution chronologique des documents par décennies",
caption = "Données: BANQ, 2023") +
xlab(NULL) +
ylab(NULL) +
theme_classic() +
geom_text(
aes(label = N),
hjust = 0.5,
vjust = -0.7,
size = 2.5,
colour = "black"
)
# Création d'un diagramme avec cette table
distrib_docs_decennies <-
ggplot(distrib_decennies[1:19], aes(x = decennies, y = N)) +
geom_bar(stat = "identity") +
labs(title = "Distribution chronologique des documents par décennies",
caption = "Données: BANQ, 2023") +
xlab(NULL) +
ylab(NULL) +
theme_classic() +
geom_text(
aes(label = N),
hjust = 0.5,
vjust = -0.7,
size = 2.5,
colour = "black"
)
# Exportation du diagramme
ggsave("resultats/diagrammes/20230418_PB_DistribChronologiqueDecennies.png", dpi=300)
# Exportation de la table sous forme de .csv
fwrite(distrib_decennies, "resultats/tables/20230418_PB_DistribChronologiqueDecennies.csv")
